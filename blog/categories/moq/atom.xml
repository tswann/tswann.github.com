<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Moq | X1B Plan]]></title>
  <link href="http://tswann.github.io/blog/categories/moq/atom.xml" rel="self"/>
  <link href="http://tswann.github.io/"/>
  <updated>2014-07-04T23:01:23+01:00</updated>
  <id>http://tswann.github.io/</id>
  <author>
    <name><![CDATA[Tom Swann]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unit Testing Dynamics CRM Plugins]]></title>
    <link href="http://tswann.github.io/blog/2013/02/13/unit-testing-dynamics-crm-plugins/"/>
    <updated>2013-02-13T12:35:00+00:00</updated>
    <id>http://tswann.github.io/blog/2013/02/13/unit-testing-dynamics-crm-plugins</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;m going to take a look at the dark art of writing unit tests for Dynamics CRM 2011 plugin classes.</p>

<p>OK, so it&rsquo;s not really all that dark, but it can be somewhat tricky if you&rsquo;re not familiar with how the plugin execution pipeline works and what kind of inputs an executing plugin expects to receive.</p>

<p>I have seen approaches to this which involve serializing the plugin context or using <a href="http://research.microsoft.com/en-us/projects/moles/">Moles</a> (not an option for everyone now that this has been deprecated by the pricey <a href="http://msdn.microsoft.com/en-us/library/hh549175.aspx">Fakes</a> framework).</p>

<p>My approach is quite simple and make use of <a href="http://code.google.com/p/moq/">Moq</a>. Rhino Mocks, NSubstitute or other feature-equivalent mocking frameworks should work just as well, so go with your preference.</p>

<!-- more -->


<h2>Mocking Dynamics</h2>

<p><img src="https://dl.dropbox.com/u/47685018/Blog/2013/02-14/mocked.png" title="Yes, I've been waiting to use this" alt="Mocking Dynamics CRM" /></p>

<p>Plugins by their nature are stateless and you must invoke a fair bit of mocking voodoo to set up the external pipeline execution context in which they run.</p>

<p>I use a base class for all my plugin tests which contains the following core:</p>

<p><div><script src='https://gist.github.com/4954043.js'></script>
<noscript><pre><code>using System;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Moq;

namespace X1bplan.PluginTesting.Plugins.Tests.Helpers
{
    public abstract class PluginTestBase
    {
        #region Constants
        protected const int STAGE_PREVALIDATION = 10;
        protected const int STAGE_PREOPERATION = 20;
        protected const int STAGE_POSTOPERATION = 40;
        #endregion

        #region Properties
        protected Mock&lt;IServiceProvider&gt; ServiceProviderMock { get; set; }
        protected Mock&lt;IOrganizationService&gt; OrganizationServiceMock { get; set; }
        protected Mock&lt;IOrganizationServiceFactory&gt; OrgServiceFactoryMock { get; set; }
        protected Mock&lt;IPluginExecutionContext&gt; PipelineContextMock { get; set; }
        #endregion

        public PluginTestBase()
        {
            ServiceProviderMock = new Mock&lt;IServiceProvider&gt;();
            OrgServiceFactoryMock = new Mock&lt;IOrganizationServiceFactory&gt;();
            OrganizationServiceMock = new Mock&lt;IOrganizationService&gt;(MockBehavior.Strict);
            PipelineContextMock = new Mock&lt;IPluginExecutionContext&gt;(MockBehavior.Strict);

            InitializeDefaults();
        }

        private void InitializeDefaults()
        {
            ServiceProviderMock.Setup(s =&gt; s.GetService(typeof(IPluginExecutionContext))).Returns(PipelineContextMock.Object);
            ServiceProviderMock.Setup(s =&gt; s.GetService(typeof(IOrganizationServiceFactory))).Returns(OrgServiceFactoryMock.Object);
            OrgServiceFactoryMock.Setup(f =&gt; f.CreateOrganizationService(It.IsAny&lt;Guid&gt;())).Returns(OrganizationServiceMock.Object);
        }
    }
}
</code></pre></noscript></div>
</p>

<p>This allows us to hide away some of the usual mock object setup code &ndash; the objects which will be common to every plugin &ndash; the IServiceProvider, IPluginExecutionContext and IOrganisationService.</p>

<p>In our individual plugin classes we can then mock the typical input parameters to the plugin context.</p>

<h2>An Example</h2>

<p>Let&rsquo;s say we have some imaginary business pals. What they would like is for a bit of validation to be triggered whenever someone attempts to delete a Contact record from the CRM database.</p>

<p>If the Contact has any open Task activities outstanding, we would like the system to display an error message and prevent the user from doing so.</p>

<p>We could of course have a piece of custom JavaScript to do this, but we want the logic to be triggered <em>any time</em> a delete occurs, be it via the front end or the API.</p>

<p>The following plugin code will do just that:</p>

<p><div><script src='https://gist.github.com/4954084.js'></script>
<noscript><pre><code>protected void ExecutePreValidateContactDelete(LocalPluginContext localContext)
{
    if (localContext == null)
    {
        throw new ArgumentNullException(&quot;localContext&quot;);
    }

    _service = localContext.OrganizationService;

    EntityReference contact = (EntityReference)localContext.PluginExecutionContext.InputParameters[&quot;Target&quot;];
    
    if (HasOpenTasks(contact.Id))
    {
        throw new InvalidPluginExecutionException(&quot;This Contact has open Tasks associated with it.\n\nPlease resolve all outstanding tasks before deleting.&quot;);
    }
}

private bool HasOpenTasks(Guid contactId)
{
    var tasks = GetRelatedTasks(contactId);
    return tasks.Any();
}

private IEnumerable&lt;Entity&gt; GetRelatedTasks(Guid contactId)
{
    QueryExpression query = new QueryExpression()
    {
        EntityName = &quot;task&quot;,
        ColumnSet = new ColumnSet(true),
    };

    const int STATE_OPEN = 0;
    query.Criteria.AddCondition(new ConditionExpression(&quot;regardingobjectid&quot;, ConditionOperator.Equal, contactId));
    query.Criteria.AddCondition(new ConditionExpression(&quot;statecode&quot;, ConditionOperator.Equal, STATE_OPEN));

    return _service.RetrieveMultiple(query).Entities.ToList&lt;Entity&gt;();
}</code></pre></noscript></div>
</p>

<p>For the sake of brevity I have cut all the boiler plate gunk that the  <a href="http://msdn.microsoft.com/en-gb/library/hh547459.aspx">Visual Studio CRM Dev  Toolkit</a> generates when you create a new plugin, leaving only the custom business logic that I actually added myself.</p>

<p>So how about writing an automated unit test for this code?</p>

<p>The purpose of providing mock objects for your unit tests is to isolate them &ndash; removing any dependence on external resources.</p>

<p>As mentioned, plugins are stateless &ndash; all of their dependencies are supplied to the plugin Execute() method by the plugin execution context object which is passed at runtime.</p>

<p>A few of the things that we will need to Mock include:</p>

<ul>
<li>The Contact object which is causing the plugin to fire</li>
<li><p>The parameters which identify the action we want to trigger for that contact, namely:</p>

<ol>
<li>The PrimaryEntityName &ndash; &lsquo;contact&rsquo; in this scenario.</li>
<li>The &lsquo;Message&rsquo; which identifies the data operation. In our case this is &lsquo;Delete&rsquo;.</li>
<li>The &lsquo;Stage&rsquo; at which it should execute. We have supplied 10, which means &lsquo;Pre-Validation&rsquo;. Our base test class contains some useful constants for these values.</li>
<li>The Guid of the calling user. Not used in our example, but could be useful if your code contains logic which is conditional on the use of a particular user account.</li>
</ol>
</li>
<li><p>The methods of the IOrganisationService which our code requires. This is generally going to be a biggie. Our example plugin calls out to RetrieveMultiple, a method which takes a QueryExpression to execute against the CRM server and return a list of entities. We must mock this with an in-memory collection. Typically this is the approach you will take for all such external CRM server calls.</p></li>
</ul>


<h2>Writing a Test</h2>

<p>So, how do we go about this? Thankfully Moq makes it pretty easy to create a lot of dependencies quickly and fluently.</p>

<p><div><script src='https://gist.github.com/4954297.js'></script>
<noscript><pre><code> [SetUp]
public void Setup()
{
    this.PipelineContextMock.Setup(p =&gt; p.UserId).Returns(Guid.NewGuid);
    this.PipelineContextMock.Setup(p =&gt; p.PrimaryEntityName).Returns(&quot;contact&quot;);
    this.PipelineContextMock.Setup(p =&gt; p.Stage).Returns(STAGE_PREVALIDATION);
}</code></pre></noscript></div>
</p>

<p>The Setup method above sets some specific values for your suite of tests &ndash; the entity type, user and validation stage.</p>

<p>Below is an example test which sets up the scenario where the validation check fails &ndash; the call to RetrieveMultiple will successfully return a matching open Task associated with the Contact:</p>

<p><div><script src='https://gist.github.com/4954348.js'></script>
<noscript><pre><code>[Test]
public void ShouldThrowExceptionIfOpenTaskExists()
{
    Entity contact = new Entity()
    {
        LogicalName = &quot;contact&quot;,
        Id = Guid.NewGuid()
    };

    ParameterCollection parameters = new ParameterCollection();
    parameters[&quot;Target&quot;] = contact.ToEntityReference();
    this.PipelineContextMock.Setup(p =&gt; p.InputParameters).Returns(parameters);
    this.PipelineContextMock.Setup(p =&gt; p.MessageName).Returns(&quot;Delete&quot;);
    EntityCollection tasks = new EntityCollection() { EntityName = &quot;task&quot;, Entities = { GetRelatedTask(contact.Id) } };
    this.OrganizationServiceMock.Setup(s =&gt; s.RetrieveMultiple(It.IsAny&lt;QueryExpression&gt;())).Returns(tasks);

    PreValidateContactDelete plugin = new PreValidateContactDelete();
    var exception = Assert.Throws&lt;InvalidPluginExecutionException&gt;(() =&gt; plugin.Execute(ServiceProviderMock.Object));
    Assert.That(exception.Message, Is.StringContaining(OPEN_TASKS_EXCEPTION));
}</code></pre></noscript></div>
</p>

<p>As you can see there&rsquo;s not much to it &ndash; we just set up the OrganisationService mock object to return a dummy task whenever it gets called within our plugin code under test.</p>

<h2>Write ALL THE TESTS</h2>

<p>I think that goes some way to illustrating that Dynamics plugins can do the TDD thing just like anything else &ndash; all you need are some great tools and <a href="http://code.google.com/p/moq/">Moq</a> is certainly one such.</p>

<p>If you&rsquo;re interested, the full source code for this example can be downloaded from github: <a href="https://github.com/tswann/x1bplan.plugintesting.git">https://github.com/tswann/x1bplan.plugintesting.git</a>.</p>

<p>I&rsquo;ve used a simple example based on the OOTB Contact entity, so it should work when deployed to any freshly created CRM organisation.</p>

<p>Until next time!</p>

<p><img src="https://dl.dropbox.com/u/47685018/Blog/2013/02-14/thesun.jpg" title="I love this game" alt="Praise the Sun" /></p>
]]></content>
  </entry>
  
</feed>
