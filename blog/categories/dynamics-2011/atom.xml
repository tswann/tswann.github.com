<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dynamics 2011 | X1B Plan]]></title>
  <link href="http://esc-plan.com/blog/categories/dynamics-2011/atom.xml" rel="self"/>
  <link href="http://esc-plan.com/"/>
  <updated>2013-03-22T19:01:39+00:00</updated>
  <id>http://esc-plan.com/</id>
  <author>
    <name><![CDATA[Tom Swann]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unit Testing Dynamics CRM Plugins]]></title>
    <link href="http://esc-plan.com/blog/2013/02/13/unit-testing-dynamics-crm-plugins/"/>
    <updated>2013-02-13T12:35:00+00:00</updated>
    <id>http://esc-plan.com/blog/2013/02/13/unit-testing-dynamics-crm-plugins</id>
    <content type="html"><![CDATA[<p>In this post I'm going to take a look at the dark art of writing unit tests for Dynamics CRM 2011 plugin classes.</p>

<p>OK, so it's not really all that dark, but it can be somewhat tricky if you're not familiar with how the plugin execution pipeline works and what kind of inputs an executing plugin expects to receive.</p>

<p>I have seen approaches to this which involve serializing the plugin context or using <a href="http://research.microsoft.com/en-us/projects/moles/">Moles</a> (not an option for everyone now that this has been deprecated by the pricey <a href="http://msdn.microsoft.com/en-us/library/hh549175.aspx">Fakes</a> framework).</p>

<p>My approach is quite simple and make use of <a href="http://code.google.com/p/moq/">Moq</a>. Rhino Mocks, NSubstitute or other feature-equivalent mocking frameworks should work just as well, so go with your preference.</p>

<!-- more -->


<h2>Mocking Dynamics</h2>

<p><img src="https://dl.dropbox.com/u/47685018/Blog/2013/02-14/mocked.png" title="Yes, I've been waiting to use this" alt="Mocking Dynamics CRM" /></p>

<p>Plugins by their nature are stateless and you must invoke a fair bit of mocking voodoo to set up the external pipeline execution context in which they run.</p>

<p>I use a base class for all my plugin tests which contains the following core:</p>

<p><div><script src='https://gist.github.com/4954043.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>This allows us to hide away some of the usual mock object setup code - the objects which will be common to every plugin - the IServiceProvider, IPluginExecutionContext and IOrganisationService.</p>

<p>In our individual plugin classes we can then mock the typical input parameters to the plugin context.</p>

<h2>An Example</h2>

<p>Let's say we have some imaginary business pals. What they would like is for a bit of validation to be triggered whenever someone attempts to delete a Contact record from the CRM database.</p>

<p>If the Contact has any open Task activities outstanding, we would like the system to display an error message and prevent the user from doing so.</p>

<p>We could of course have a piece of custom JavaScript to do this, but we want the logic to be triggered <em>any time</em> a delete occurs, be it via the front end or the API.</p>

<p>The following plugin code will do just that:</p>

<p><div><script src='https://gist.github.com/4954084.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>For the sake of brevity I have cut all the boiler plate gunk that the  <a href="http://msdn.microsoft.com/en-gb/library/hh547459.aspx">Visual Studio CRM Dev  Toolkit</a> generates when you create a new plugin, leaving only the custom business logic that I actually added myself.</p>

<p>So how about writing an automated unit test for this code?</p>

<p>The purpose of providing mock objects for your unit tests is to isolate them - removing any dependence on external resources.</p>

<p>As mentioned, plugins are stateless - all of their dependencies are supplied to the plugin Execute() method by the plugin execution context object which is passed at runtime.</p>

<p>A few of the things that we will need to Mock include:</p>

<ul>
<li>The Contact object which is causing the plugin to fire</li>
<li><p>The parameters which identify the action we want to trigger for that contact, namely:</p>

<ol>
<li>The PrimaryEntityName - 'contact' in this scenario.</li>
<li>The 'Message' which identifies the data operation. In our case this is 'Delete'.</li>
<li>The 'Stage' at which it should execute. We have supplied 10, which means 'Pre-Validation'. Our base test class contains some useful constants for these values.</li>
<li>The Guid of the calling user. Not used in our example, but could be useful if your code contains logic which is conditional on the use of a particular user account.</li>
</ol>
</li>
<li><p>The methods of the IOrganisationService which our code requires. This is generally going to be a biggie. Our example plugin calls out to RetrieveMultiple, a method which takes a QueryExpression to execute against the CRM server and return a list of entities. We must mock this with an in-memory collection. Typically this is the approach you will take for all such external CRM server calls.</p></li>
</ul>


<h2>Writing a Test</h2>

<p>So, how do we go about this? Thankfully Moq makes it pretty easy to create a lot of dependencies quickly and fluently.</p>

<p><div><script src='https://gist.github.com/4954297.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>The Setup method above sets some specific values for your suite of tests - the entity type, user and validation stage.</p>

<p>Below is an example test which sets up the scenario where the validation check fails - the call to RetrieveMultiple will successfully return a matching open Task associated with the Contact:</p>

<p><div><script src='https://gist.github.com/4954348.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>As you can see there's not much to it - we just set up the OrganisationService mock object to return a dummy task whenever it gets called within our plugin code under test.</p>

<h2>Write ALL THE TESTS</h2>

<p>I think that goes some way to illustrating that Dynamics plugins can do the TDD thing just like anything else - all you need are some great tools and <a href="http://code.google.com/p/moq/">Moq</a> is certainly one such.</p>

<p>If you're interested, the full source code for this example can be downloaded from github: <a href="https://github.com/tswann/x1bplan.plugintesting.git">https://github.com/tswann/x1bplan.plugintesting.git</a>.</p>

<p>I've used a simple example based on the OOTB Contact entity, so it should work when deployed to any freshly created CRM organisation.</p>

<p>Until next time!</p>

<p><img src="https://dl.dropbox.com/u/47685018/Blog/2013/02-14/thesun.jpg" title="I love this game" alt="Praise the Sun" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Controlling Access to Dynamics CRM ribbon buttons]]></title>
    <link href="http://esc-plan.com/blog/2013/01/07/controlling-access-to-dynamics-crm-ribbon-buttons/"/>
    <updated>2013-01-07T14:46:00+00:00</updated>
    <id>http://esc-plan.com/blog/2013/01/07/controlling-access-to-dynamics-crm-ribbon-buttons</id>
    <content type="html"><![CDATA[<p>At the moment I'm working on a project which is an interesting combination of core Dynamics CRM functionality and a set of custom processes written using ASP.NET MVC 4 and Web API.</p>

<p>Each custom process is something like an [OOTB CRM dialog] - a sequence of screens which the user can progress backwards and forwards through using Next/Previous navigation. At the end of the flow the dialog is completed and a series of CRM records is saved off/workflow invoked or whatever.</p>

<p>While there is much the OOTB CRM dialogs can achieve, they weren't a fit for the level of control we required - i.e. a more complex UI and with a slicker user experience and integration with various external systems.</p>

<p>Each process is launched from a custom CRM ribbon button.</p>

<p>In this blog, I'll take a look at the access control scheme we chose to restrict access to these processes for particular users.</p>

<!-- more -->


<h2>Using Security Roles</h2>

<p>We would like to be able to specify which users have access to certain ribbon buttons using the Dynamics CRM built-in security roles mechanism.</p>

<p>To achieve this, you will need to create a custom entity for each ribbon button you want to hide or display.</p>

<p>For example, for a custom 'Upload File' button on your Contact ribbon - create a 'new_rbnUploadFile' entity. (new_ being whatever your organisation prefix actually happens to be).</p>

<p>It's a good idea to include RBN in the name to help distinguish entities which are being used for this purpose from any other business oriented custom entities in the schema.</p>

<p>You don't need to add anything to this entity definition beyond creating it - it should have the bare minimum of options enabled and 'Organisation' ownership.</p>

<p>The purpose of this is purely so that we can see it in the Security roles matrix.</p>

<p>It should appear under the 'Custom' tab for a role like so:</p>

<p><img src="https://dl.dropbox.com/u/47685018/Blog/2013/01-09/Security_Role.png" title="Custom entity permissions" alt="Custom entity permissions" /></p>

<p>So to specify that this role can access the Upload File ribbon button we are setting the 'Write' permission on it's associated entity. Really we could use any of the permissions for this, but what's important is that you adopt a convention and 'Read' or 'Write'probably make more sense than the others (you don't want anyone creating instances of these entities).</p>

<h2>Defining the Display Rule</h2>

<p>To make use of this we will define a Display Rule on the Upload File button which will link it to our custom entity.</p>

<p>Only users or teams with a security role that has a 'Write' privilege on the RBN Upload File entity will be able to see the button.</p>

<p>This configuration can easily be done using <a href="http://www.develop1.net/public/page/Ribbon-Workbench-for-Dynamics-CRM-2011.aspx">Ribbon Workbench</a>.</p>

<p>We want to add the new button to the Contact form ribbon. For this we create a new Command definition as shown below to which we will add the Display Rule:</p>

<p><img src="https://dl.dropbox.com/u/47685018/Blog/2013/01-09/Add%20Command.png" title="Add Display Rule" alt="Add Display Rule" /></p>

<p>The display rule will consist of a single 'Step' of type 'Entity Privilege Rule' as shown below.</p>

<p><img src="https://dl.dropbox.com/u/47685018/Blog/2013/01-09/Rule%20Type.png" title="Entity Privilege Rule" alt="Entity Privilege Rule" /></p>

<p>This rule defines that this ribbon button will only be displayed to users with 'Write' privileges on the RBN Upload File entity.</p>

<p><img src="https://dl.dropbox.com/u/47685018/Blog/2013/01-09/Entity%20Privilege%20Rule.png" alt="Rule Definitions" /></p>

<p>And that's it! We now have a ribbon button which can be hidden or displayed via the user's security role.</p>

<h2>Other Options</h2>

<p>Annoyingly the 'Entity Privilege Rule' is not an option if you're considering enabling/disabling the button using this security role controlled method.</p>

<p>The best option here is probably to use the 'Custom JavaScript Rule' and pass it the custom entity name as a parameter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Defining Dynamics CRM entities]]></title>
    <link href="http://esc-plan.com/blog/2012/10/31/defining-crm-entities/"/>
    <updated>2012-10-31T16:29:00+00:00</updated>
    <id>http://esc-plan.com/blog/2012/10/31/defining-crm-entities</id>
    <content type="html"><![CDATA[<p>Over the last few weeks I have been tasked with configuring a sizable Dynamics CRM solution. Having been through a lengthy period of analysis it's somewhat nice to be building again. So, I thought it would be useful to reflect on some of the work that's led up to this point.</p>

<p>Particularly as regards defining the entities themselves. This is the guts of any CRM project, and I'm coming to some conclusions around what works and what doesn't work so well (and how I'd ideally like to do it in future).</p>

<p>We've used a combination of two things:</p>

<ul>
<li>A definition of the entity data. What does this entity actually represent?<br/>
This is where we say: What fields? Which data types are they?
What are my OptionSet values? So on and so forth.</li>
<li>A wireframe defining the layout of the entity's main form.</li>
</ul>


<!-- more -->


<h2>The Long Slog</h2>

<p>All in all our solution has ~60 custom entities as well as a variety of tweaks and additions to the OOTB standard stuff like Contacts and Accounts.</p>

<p>Some of these have an awful lot of fields.</p>

<p>When it comes to manually creating all of these via the Dynamics administrative GUI, well... it's time to get the headphones in shall we say.</p>

<p>Somewhat unsurprisingly, all of this must be documented in Word. Each entity has a table listing the required fields, the data type, minimum/maximum values any default values and so on.</p>

<p>It's a lot of information to capture, and no matter how nicely it's formatted it's always going to be a dry read for the customer (and the developer, let's be honest).</p>

<p><span class='pullquote-right' data-pullquote='Dynamics has quite a tight coupling between this concept of the entity&#8217;s &#8220;data type&#8221; and it&#8217;s appearance in the UI.'>
Dynamics has quite a tight coupling between this concept of the entity's "data type" and it's appearance in the UI. Of course, when it comes to your documentation it need not be so.</p>

<p>Our preference has been to have one definition for the data and a seperate, rather 'cartoony' wireframe which exclusively depicts the layout.
</span></p>

<h2>Power Mockup</h2>

<p><a href="http://www.powermockup.com/">Power Mockup</a>* is a nice wireframing tool which I've used to define a large number of the screens/forms in our solution where specific layout requirements are warranted. It provides a set of easy to use templates from within MS PowerPoint - the learning curve is fairly non-existent and it saves to a common format.</p>

<p>The implication that not all entities require a tailored layout is important. If an entity only has a few fields and its function is purely as reference data item, well... it probably doesn't warrant a screen design all of its own. A bit of common sense should prevail here.</p>

<p>In these cases it's sufficient to set a general principle that fields will appear on a form in the order that they appear in the entity's data definition (from top to bottom, left to right).</p>

<p>For everything else there's a wireframe.</p>

<p>The function of this is to purely show field layout. The data definition already defines the data types of fields, so why duplicate that information in the wireframe?</p>

<p>* <em>Saying Power Mockup in a Ballymena accent may lead to peer ridicule.</em></p>

<h2>Auto-Magic Entity Configurator</h2>

<p>So if all of the data definitions have been captured and documented as part of our analysis, why should it be that we now have to go through this list and manually enter it all once again, this time through the Dynamics UI?</p>

<p><span class='pullquote-right' data-pullquote='I&#8217;m sure there is a better solution to be had here.'>
I'm sure there is a better solution to be had here. My feeling is that the <a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.messages.createentityrequest.aspx">Create Entity Request</a> class and similar classes used for field creation in the Xrm SDK could usefully automate the entity configuration process.
</span></p>

<p><div><script src='https://gist.github.com/3994712.js?file='></script>
<noscript><pre><code>CreateEntityRequest createrequest = new CreateEntityRequest
{

    //Define the entity
    Entity = new EntityMetadata
    {
        SchemaName = _customEntityName,
        DisplayName = new Label(&quot;Bank Account&quot;, 1033),
        DisplayCollectionName = new Label(&quot;Bank Accounts&quot;, 1033),
        Description = new Label(&quot;An entity to store information about customer bank accounts&quot;, 1033),
        OwnershipType = OwnershipTypes.UserOwned,
        IsActivity = false,

    },

    // Define the primary attribute for the entity
    PrimaryAttribute = new StringAttributeMetadata
    {
        SchemaName = &quot;new_accountname&quot;,
        RequiredLevel = new AttributeRequiredLevelManagedProperty(AttributeRequiredLevel.None),
        MaxLength = 100,
        Format = StringFormat.Text,
        DisplayName = new Label(&quot;Account Name&quot;, 1033),
        Description = new Label(&quot;The primary attribute for the Bank Account entity.&quot;, 1033)
    }

};
_serviceProxy.Execute(createrequest);
Console.WriteLine(&quot;The bank account entity has been created.&quot;);</code></pre></noscript></div>
</p>

<p>What you would need are two files (.csv or similar) which the Automagic Configurator (tm) can read in and parse. It would then call the Dynamics API to do the laborious creation part for you:</p>

<ul>
<li><p>One is a 'header' file which defines the general entity information - Name, ownership level, primary attribute etc.
You must define these separately and up front as it's the easiest way to avoid order dependencies when creating Lookup fields in the next file...</p></li>
<li><p>The second file contains the field definitions. This captures our data types, min/max values etc.</p></li>
</ul>


<p>Together these files would capture essentially what we've currently been documenting in Word, but would feed directly into the build phase cutting out a lot of grunt work. I always like to avoid grunt work. That's what computers are for!</p>

<p>As far as I'm aware such a tool doesn't currently exist. For me it might be a case of, if it doesn't come - build it!</p>

<h2>And so</h2>

<p>The alternative to the scenario described is obviously some form of Agile. That almost goes without saying. In this blog, I'm trying to think of a way to get round doing a whole lot of CRM configuration up front at the start of a build phase after a lengthly period of analysis.</p>

<p>You can feasibly cut down on the overall time by doing your field creation and form definition at once from the Form designer (rather than creating all the fields and <strong>then</strong> firing up the form designer).</p>

<p>The problem is that if you have a whole slew of custom processes for which the CRM configuration is a dependency (as part of a Portal for example) then many of your team are going to be twiddling their thumbs until the underlying entity model is in place (at least, in place to some extent). That means getting the field definitions done has to take priority over form layouts.</p>

<h2>In other news</h2>

<p>As previously mentioned my Raspberry Pi finally arrived last week. Unfortunately it arrived at my parent's house deep in the darkest hills. So I still haven't got to play with it yet. <a href="http://xbmc.org/about/">XBMC</a> looks like it could be the way to go for me though.</p>

<p>I wonder how long I can keep making blog posts and working in a mention of <a href="http://en.wikipedia.org/wiki/Dark_Souls">Dark Souls</a>? Let's find out!</p>
]]></content>
  </entry>
  
</feed>
