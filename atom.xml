<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[X1B Plan]]></title>
  <link href="http://www.esc-plan.com/atom.xml" rel="self"/>
  <link href="http://www.esc-plan.com/"/>
  <updated>2013-01-09T20:04:00+00:00</updated>
  <id>http://www.esc-plan.com/</id>
  <author>
    <name><![CDATA[Tom Swann]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Controlling Access to Dynamics CRM ribbon buttons]]></title>
    <link href="http://www.esc-plan.com/blog/2013/01/07/controlling-access-to-dynamics-crm-ribbon-buttons/"/>
    <updated>2013-01-07T14:46:00+00:00</updated>
    <id>http://www.esc-plan.com/blog/2013/01/07/controlling-access-to-dynamics-crm-ribbon-buttons</id>
    <content type="html"><![CDATA[<p>At the moment I&#8217;m working on a project which is an interesting combination of core Dynamics CRM functionality and a set of custom processes written using ASP.NET MVC 4 and Web API.</p>

<p>Each custom process is something like an [OOTB CRM dialog] - a sequence of screens which the user can progress backwards and forwards through using Next/Previous navigation. At the end of the flow the dialog is completed and a series of CRM records is saved off/workflow invoked or whatever.</p>

<p>While there is much the OOTB CRM dialogs can achieve, they weren&#8217;t a fit for the level of control we required - i.e. a more complex UI and with a slicker user experience and integration with various external systems.</p>

<p>Each process is launched from a custom CRM ribbon button.</p>

<p>In this blog, I&#8217;ll take a look at the access control scheme we chose to restrict access to these processes for particular users.</p>

<!-- more -->


<h2>Using Security Roles</h2>

<p>We would like to be able to specify which users have access to certain ribbon buttons using the Dynamics CRM built-in security roles mechanism.</p>

<p>To achieve this, you will need to create a custom entity for each ribbon button you want to hide or display.</p>

<p>For example, for a custom &#8216;Upload File&#8217; button on your Contact ribbon - create a &#8216;new_rbnUploadFile&#8217; entity. (new_ being whatever your organisation prefix actually happens to be).</p>

<p>It&#8217;s a good idea to include RBN in the name to help distinguish entities which are being used for this purpose from any other business oriented custom entities in the schema.</p>

<p>You don&#8217;t need to add anything to this entity definition beyond creating it - it should have the bare minimum of options enabled and &#8216;Organisation&#8217; ownership.</p>

<p>The purpose of this is purely so that we can see it in the Security roles matrix.</p>

<p>It should appear under the &#8216;Custom&#8217; tab for a role like so:</p>

<p><img src="https://dl.dropbox.com/u/47685018/Blog/2013/01-09/Security_Role.png" title="Custom entity permissions" alt="Custom entity permissions" /></p>

<p>So to specify that this role can access the Upload File ribbon button we are setting the &#8216;Write&#8217; permission on it&#8217;s associated entity. Really we could use any of the permissions for this, but what&#8217;s important is that you adopt a convention and &#8216;Read&#8217;, &#8216;Write&#8217; or &#8216;Create&#8217; probably make more sense than the others.</p>

<h2>Defining the Display Rule</h2>

<p>To make use of this we will define a Display Rule on the Upload File button which will link it to our custom entity.</p>

<p>Only users or teams with a security role that has a &#8216;Write&#8217; privilege on the RBN Upload File entity will be able to see the button.</p>

<p>This configuration can easily be done using <a href="http://www.develop1.net/public/page/Ribbon-Workbench-for-Dynamics-CRM-2011.aspx">Ribbon Workbench</a>.</p>

<p>We want to add the new button to the Contact form ribbon. For this we create a new Command definition as shown below to which we will add the Display Rule:</p>

<p><img src="https://dl.dropbox.com/u/47685018/Blog/2013/01-09/Add%20Command.png" title="Add Display Rule" alt="Add Display Rule" /></p>

<p>The display rule will consist of a single &#8216;Step&#8217; of type &#8216;Entity Privilege Rule&#8217; as shown below.</p>

<p><img src="https://dl.dropbox.com/u/47685018/Blog/2013/01-09/Rule%20Type.png" title="Entity Privilege Rule" alt="Entity Privilege Rule" /></p>

<p>This rule defines that this ribbon button will only be displayed to users with &#8216;Write&#8217; privileges on the RBN Upload File entity.</p>

<p><img src="https://dl.dropbox.com/u/47685018/Blog/2013/01-09/Entity%20Privilege%20Rule.png" alt="Rule Definitions" /></p>

<p>And that&#8217;s it! We now have a ribbon button which can be hidden or displayed via the user&#8217;s security role.</p>

<h2>Other Options</h2>

<p>Annoyingly the &#8216;Entity Privilege Rule&#8217; is not an option if you&#8217;re considering enabling/disabling the button using this security role controlled method.</p>

<p>The best option here is probably to use the &#8216;Custom JavaScript Rule&#8217; and pass it the custom entity name as a parameter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Defining Dynamics CRM entities]]></title>
    <link href="http://www.esc-plan.com/blog/2012/10/31/defining-crm-entities/"/>
    <updated>2012-10-31T16:29:00+00:00</updated>
    <id>http://www.esc-plan.com/blog/2012/10/31/defining-crm-entities</id>
    <content type="html"><![CDATA[<p>Over the last few weeks I have been tasked with configuring a sizable Dynamics CRM solution. Having been through a lengthy period of analysis it&#8217;s somewhat nice to be building again. So, I thought it would be useful to reflect on some of the work that&#8217;s led up to this point.</p>

<p>Particularly as regards defining the entities themselves. This is the guts of any CRM project, and I&#8217;m coming to some conclusions around what works and what doesn&#8217;t work so well (and how I&#8217;d ideally like to do it in future).</p>

<p>We&#8217;ve used a combination of two things:</p>

<ul>
<li>A definition of the entity data. What does this entity actually represent?<br/>
This is where we say: What fields? Which data types are they?
What are my OptionSet values? So on and so forth.</li>
<li>A wireframe defining the layout of the entity&#8217;s main form.</li>
</ul>


<!-- more -->


<h2>The Long Slog</h2>

<p>All in all our solution has ~60 custom entities as well as a variety of tweaks and additions to the OOTB standard stuff like Contacts and Accounts.</p>

<p>Some of these have an awful lot of fields.</p>

<p>When it comes to manually creating all of these via the Dynamics administrative GUI, well&#8230; it&#8217;s time to get the headphones in shall we say.</p>

<p>Somewhat unsurprisingly, all of this must be documented in Word. Each entity has a table listing the required fields, the data type, minimum/maximum values any default values and so on.</p>

<p>It&#8217;s a lot of information to capture, and no matter how nicely it&#8217;s formatted it&#8217;s always going to be a dry read for the customer (and the developer, let&#8217;s be honest).</p>

<p><span class='pullquote-right' data-pullquote='Dynamics has quite a tight coupling between this concept of the entity&#8217;s &#8220;data type&#8221; and it&#8217;s appearance in the UI.'>
Dynamics has quite a tight coupling between this concept of the entity&#8217;s &#8220;data type&#8221; and it&#8217;s appearance in the UI. Of course, when it comes to your documentation it need not be so.</p>

<p>Our preference has been to have one definition for the data and a seperate, rather &#8216;cartoony&#8217; wireframe which exclusively depicts the layout.
</span></p>

<h2>Power Mockup</h2>

<p><a href="http://www.powermockup.com/">Power Mockup</a>* is a nice wireframing tool which I&#8217;ve used to define a large number of the screens/forms in our solution where specific layout requirements are warranted. It provides a set of easy to use templates from within MS PowerPoint - the learning curve is fairly non-existent and it saves to a common format.</p>

<p>The implication that not all entities require a tailored layout is important. If an entity only has a few fields and its function is purely as reference data item, well&#8230; it probably doesn&#8217;t warrant a screen design all of its own. A bit of common sense should prevail here.</p>

<p>In these cases it&#8217;s sufficient to set a general principle that fields will appear on a form in the order that they appear in the entity&#8217;s data definition (from top to bottom, left to right).</p>

<p>For everything else there&#8217;s a wireframe.</p>

<p>The function of this is to purely show field layout. The data definition already defines the data types of fields, so why duplicate that information in the wireframe?</p>

<p>* <em>Saying Power Mockup in a Ballymena accent may lead to peer ridicule.</em></p>

<h2>Auto-Magic Entity Configurator</h2>

<p>So if all of the data definitions have been captured and documented as part of our analysis, why should it be that we now have to go through this list and manually enter it all once again, this time through the Dynamics UI?</p>

<p><span class='pullquote-right' data-pullquote='I&#8217;m sure there is a better solution to be had here.'>
I&#8217;m sure there is a better solution to be had here. My feeling is that the <a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.messages.createentityrequest.aspx">Create Entity Request</a> class and similar classes used for field creation in the Xrm SDK could usefully automate the entity configuration process.
</span></p>

<div><script src='https://gist.github.com/3994712.js?file='></script>
<noscript><pre><code>CreateEntityRequest createrequest = new CreateEntityRequest
{

    //Define the entity
    Entity = new EntityMetadata
    {
        SchemaName = _customEntityName,
        DisplayName = new Label(&quot;Bank Account&quot;, 1033),
        DisplayCollectionName = new Label(&quot;Bank Accounts&quot;, 1033),
        Description = new Label(&quot;An entity to store information about customer bank accounts&quot;, 1033),
        OwnershipType = OwnershipTypes.UserOwned,
        IsActivity = false,

    },

    // Define the primary attribute for the entity
    PrimaryAttribute = new StringAttributeMetadata
    {
        SchemaName = &quot;new_accountname&quot;,
        RequiredLevel = new AttributeRequiredLevelManagedProperty(AttributeRequiredLevel.None),
        MaxLength = 100,
        Format = StringFormat.Text,
        DisplayName = new Label(&quot;Account Name&quot;, 1033),
        Description = new Label(&quot;The primary attribute for the Bank Account entity.&quot;, 1033)
    }

};
_serviceProxy.Execute(createrequest);
Console.WriteLine(&quot;The bank account entity has been created.&quot;);</code></pre></noscript></div>


<p>What you would need are two files (.csv or similar) which the Automagic Configurator (tm) can read in and parse. It would then call the Dynamics API to do the laborious creation part for you:</p>

<ul>
<li><p>One is a &#8216;header&#8217; file which defines the general entity information - Name, ownership level, primary attribute etc.
You must define these separately and up front as it&#8217;s the easiest way to avoid order dependencies when creating Lookup fields in the next file&#8230;</p></li>
<li><p>The second file contains the field definitions. This captures our data types, min/max values etc.</p></li>
</ul>


<p>Together these files would capture essentially what we&#8217;ve currently been documenting in Word, but would feed directly into the build phase cutting out a lot of grunt work. I always like to avoid grunt work. That&#8217;s what computers are for!</p>

<p>As far as I&#8217;m aware such a tool doesn&#8217;t currently exist. For me it might be a case of, if it doesn&#8217;t come - build it!</p>

<h2>And so</h2>

<p>The alternative to the scenario described is obviously some form of Agile. That almost goes without saying. In this blog, I&#8217;m trying to think of a way to get round doing a whole lot of CRM configuration up front at the start of a build phase after a lengthly period of analysis.</p>

<p>You can feasibly cut down on the overall time by doing your field creation and form definition at once from the Form designer (rather than creating all the fields and <strong>then</strong> firing up the form designer).</p>

<p>The problem is that if you have a whole slew of custom processes for which the CRM configuration is a dependency (as part of a Portal for example) then many of your team are going to be twiddling their thumbs until the underlying entity model is in place (at least, in place to some extent). That means getting the field definitions done has to take priority over form layouts.</p>

<h2>In other news</h2>

<p>As previously mentioned my Raspberry Pi finally arrived last week. Unfortunately it arrived at my parent&#8217;s house deep in the darkest hills. So I still haven&#8217;t got to play with it yet. <a href="http://xbmc.org/about/">XBMC</a> looks like it could be the way to go for me though.</p>

<p>I wonder how long I can keep making blog posts and working in a mention of <a href="http://en.wikipedia.org/wiki/Dark_Souls">Dark Souls</a>? Let&#8217;s find out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving]]></title>
    <link href="http://www.esc-plan.com/blog/2012/10/25/moving/"/>
    <updated>2012-10-25T16:24:00+01:00</updated>
    <id>http://www.esc-plan.com/blog/2012/10/25/moving</id>
    <content type="html"><![CDATA[<h2>Just Keep Moving</h2>

<p>I&#8217;ve finally got round to re-locating my blog from posterous to it&#8217;s shiny new home on <a href="http://pages.github.com">Github Pages</a>.</p>

<p><span class='pullquote-right' data-pullquote='just needed to give myself the requisite shove'>
It was a while coming really. I&#8217;ve been a bit desirous of <a href="http://yobriefca.se/">Jame&#8217;s</a> setup using <a href="http://octopress.org/">Octopress</a> for some while now and just needed to give myself the requisite shove to sort it out.</p>

<p>Now all it needs is some shiny content! I&#8217;ll spend some time migrating the old stuff over, then it&#8217;ll be time to plough ahead with some exciting new ramblings!
</span></p>

<p>I might have something to say on the <a href="http://www.raspberrypi.org/">Raspberry Pi</a> shortly as my order <em>finally</em> shipped after 3 months of tortured waiting.</p>

<p>The <a href="http://www.thedailybrick.co.uk/lego-sets/custom/lego-custom-raspberry-pi-case.html">Lego case</a> is obviously being assembled as we speak&#8230;</p>

<p><strong><em>EDIT</em></strong> Hmm. On second thoughts - lifes too short by far. You can find the old stuff at <a href="http://tswann.posterous.com">tswann.posterous.com</a>. Enjoy!</p>
]]></content>
  </entry>
  
</feed>
